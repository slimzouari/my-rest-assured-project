<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>my-rest-assured-project</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>1.11</java.version>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <restassured.version>4.3.2</restassured.version>
        <junit4-dataprovider.version>2.6</junit4-dataprovider.version>
        <junit.version>4.13.1</junit.version>

    </properties>

    <dependencies>

        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${restassured.version}</version>
        </dependency>

        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-path</artifactId>
            <version>${restassured.version}</version>
        </dependency>


        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>xml-path</artifactId>
            <version>${restassured.version}</version>
        </dependency>


<!--        If you want to validate that a JSON response conforms to a Json Schema you can use the json-schema-validator module:-->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-schema-validator</artifactId>
            <version>${restassured.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
        </dependency>
        <dependency>
            <groupId>com.tngtech.junit.dataprovider</groupId>
            <artifactId>junit4-dataprovider</artifactId>
            <version>${junit4-dataprovider.version}</version>
        </dependency>
        <dependency>
            <groupId>org.example</groupId>
            <artifactId>my-rest-assured-project</artifactId>
            <version>1.0-SNAPSHOT</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.tomakehurst</groupId>
            <artifactId>wiremock-jre8</artifactId>
            <version>2.27.2</version>
            <scope>test</scope>
        </dependency>

        <!--        If you're using Spring Mvc you can now unit test your controllers using the RestAssuredMockMvc API in the spring-mock-mvc module-->
<!--        <dependency>-->
<!--            <groupId>io.rest-assured</groupId>-->
<!--            <artifactId>spring-mock-mvc</artifactId>-->
<!--            <version>${rest-assured-version}</version>-->
<!--        </dependency>-->


<!--        If you're using Spring Webflux you can now unit test your reactive controllers using the RestAssuredWebTestClient API in the spring-mock-mvc module.-->
<!--        <dependency>-->
<!--            <groupId>io.rest-assured</groupId>-->
<!--            <artifactId>spring-web-test-client</artifactId>-->
<!--            <version>${rest-assured-version}</version>-->
<!--        </dependency>-->

    </dependencies>





</project>